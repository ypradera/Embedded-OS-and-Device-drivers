
//ECE 373
//Josh Pradera

#include <linux/init.h>    
#include <linux/module.h>  
#include <linux/uaccess.h>
#include <linux/types.h>
#include <linux/fs.h> 
#include <linux/usb.h> 
#include <linux/slab.h>
#include <linux/cdev.h>
#include <linux/kdev_t.h>
#include <linux/errno.h>   
#include <linux/pci.h>    
#include <linux/timer.h>

#define PCI_DEVICE_e1000 0x100e   //Device Number
#define DEVICE_COUNT 1
#define PE_REG_LEDS 0xE00         //Register Offset
#define DEVICE_NAME "a4"

static char *pe_driver_name = "pci_device";
static struct cdev cdev;
static dev_t dev_node;
static unsigned long led_status = 0;
static struct timer_list blink_timer;
unsigned long led0_mask = 0xFFFFFFF0;
unsigned long led0_off = 0xF;
unsigned long led0_on = 0xE;
int blink_rate = 2;

//module parameters
module_param(blink_rate, int, S_IRUSR | S_IWUSR);

//Defining the device table struct
static const struct pci_device_id hw_pci_tbl[] = {
  {PCI_DEVICE(PCI_VENDOR_ID_INTEL, PCI_DEVICE_e1000), 0, 0, 0},
  {0, }
};

struct pes{
  struct pci_dev *pdev;
  void *hardware_address;
};

struct pes *pe;

static int hw_probing(struct pci_dev *pdev, const struct pci_device_id *ent){
  int err;
  u32 ioremap_len;
  
 //Initializing the device
  err = pci_enable_device_mem(pdev);
  if(err){return err;}
  
  //Setting for low or High DMA
  err = dma_set_mask(&pdev->dev, DMA_BIT_MASK(64));
  if(err){dev_err(&pdev->dev, "The DMA configuration has failed: 0x%x\n", err); goto err_dma;}
  
 //PCI connections
  err = pci_request_selected_regions(pdev, pci_select_bars(pdev, IORESOURCE_MEM), pe_driver_name);
  if(err){dev_info(&pdev->dev, "The pci_request_selected_regions has failed %d\n", err); goto err_pci_reg;}
  pci_set_master(pdev);
  
  //Zero Kernel 
  pe = kzalloc(sizeof(*pe), GFP_KERNEL);
  if(!pe){err = -ENOMEM; goto err_pe_alloc;}
  
  pe->pdev = pdev;
  pci_set_drvdata(pdev, pe);
  ioremap_len = min_t(int, pci_resource_len(pdev, 0), 1024);
  
  pe->hardware_address = ioremap(pci_resource_start(pdev, 0), ioremap_len);
  if(!pe->hardware_address){
    err = -EIO;
    dev_info(&pdev->dev, "ioremap(0x%04x, 0x%04x) has failed: 0x%x\n",
             (unsigned int)pci_resource_start(pdev, 0),
             (unsigned int)pci_resource_len(pdev, 0), err);
    goto err_ioremap;
  }
  return(0);

  //Error with memory mapping 
  err_ioremap:
    kfree(pe);
   
  err_pe_alloc:
    pci_release_selected_regions(pdev, pci_select_bars(pdev, IORESOURCE_MEM));

  //error with pci connections 
  err_pci_reg:
    
  err_dma:
    pci_disable_device(pdev);
  
  return(err);
}


//Remove function 
static void hw_remove(struct pci_dev *pdev){
  
  struct pes *pe = pci_get_drvdata(pdev);
  iounmap(pe->hardware_address);
  kfree(pe);

  //Release PCI devices
  pci_release_selected_regions(pdev, pci_select_bars(pdev, IORESOURCE_MEM));
  pci_disable_device(pdev);
} 

static void led_toggle(unsigned long led_status){
  //get LED status
  led_status = readl(pe->hardware_address + PE_REG_LEDS);
  
  //in case ON turn OFF
  if(led_status<<31 == 0){
    led_status = (led_status & led0_mask) | led0_off;
 
    writel(led_status, (pe->hardware_address + PE_REG_LEDS));
  }

 //If LED OFF turn ON
  else{
    led_status = (led_status & led0_mask) | led0_on;
    writel(led_status, (pe->hardware_address + PE_REG_LEDS));
  }
 
  mod_timer(&blink_timer, jiffies + msecs_to_jiffies((500 / blink_rate)));
  return;
}

static int hw_open(struct inode *inode, struct file *file){
  setup_timer(&blink_timer, led_toggle, led_status);
  
  //START timer
  mod_timer(&blink_timer, jiffies + msecs_to_jiffies((500 / blink_rate)));

  return(0);
}

//Read Function
static ssize_t hw_read(struct file *file, char __user *buffer, size_t len, loff_t *offset){
  int ret;
  if(!buffer){
    ret = -EINVAL;
    goto out;
  }
  
//If offset is too lage
  if(*offset >= sizeof(int)){
    ret = -EINVAL;
    goto out;
  }
  
  if(copy_to_user(buffer, &blink_rate, sizeof(int))){
    ret = -EFAULT;
    goto out;
  }

  ret = sizeof(int);
  *offset += len;

  out:
    return(ret);
}

//Write Function 
static ssize_t hw_write(struct file *file, const char __user *buffer, size_t len, loff_t *offset){
  unsigned char * kernel_buffer;
  int ret;
 
  if (!buffer){
    ret = -EINVAL;
    goto out;
  }
  
  pr_info("size of u32 = %d\n", sizeof(u32));
  if(len != sizeof(u32)){
    ret = -EINVAL;
    goto out;
  }
 
  if(buffer <= 0){
    ret = -EINVAL;
    goto out;
  }
  
//Getting memory
  kernel_buffer = kmalloc(len, GFP_KERNEL);
  if(!kernel_buffer){
    ret = -ENOMEM;
    goto out;
  }
  

  if(copy_from_user(kernel_buffer, buffer, len)){
    ret = -EFAULT;
    goto mem_out;
  }
  
  //blink rate set to zero
  blink_rate = 0;
  blink_rate = (int)*kernel_buffer;
  ret = len;
  
  //free kernel memory
  mem_out:
    kfree(kernel_buffer);
  out:
    return(ret);
}

static struct pci_driver pci_ops = {
  .name     = "a4",
  .id_table = hw_pci_tbl,
  .probe    = hw_probing,
  .remove   = hw_remove,
};

static struct file_operations char_ops = {
  .owner = THIS_MODULE,
  .open = hw_open,
  .read = hw_read,
  .write = hw_write,
}; 

static int __init pe_init(void){
  int ret;
  
  printk(KERN_INFO "%s loaded.\n", pci_ops.name);
  ret = pci_register_driver(&pci_ops);

  if(alloc_chrdev_region(&dev_node, 0, DEVICE_COUNT, DEVICE_NAME)){
  
    printk(KERN_ERR "The alloc_chrdev_region() has failed!\n");
    return(-1);
  } 
  
  printk(KERN_INFO "Allocated %d device/s at %d %d.\n", DEVICE_COUNT, MAJOR(dev_node), MINOR(dev_node));
 
  cdev_init(&cdev, &char_ops);
  
  //Set owner for char device
  cdev.owner = THIS_MODULE;
  
  //Adding char to kernel
  if(cdev_add(&cdev, dev_node, DEVICE_COUNT)){
    
    printk(KERN_ERR "cdev_add() has failed!\n");
    unregister_chrdev_region(dev_node, DEVICE_COUNT);

    return(-1);
  } 
  
  return(0);
} 

//exit function 
static void __exit pe_exit(void){
 //get off led timer
  del_timer_sync(&blink_timer);
  
  pci_unregister_driver(&pci_ops);
  printk(KERN_INFO "%s unregistered.\n", pci_ops.name);

  //delete char device
  cdev_del(&cdev);
  printk(KERN_INFO "Char device has been deleted.\n");

  unregister_chrdev_region(dev_node, DEVICE_COUNT);
  printk(KERN_INFO "Char device unregistered.\n");
}

// module info 
MODULE_AUTHOR("Josh Pradera");
MODULE_LICENSE("GPL");
MODULE_VERSION("1.0");
MODULE_DEVICE_TABLE(pci, hw_pci_tbl);
module_init(pe_init);
module_exit(pe_exit);
